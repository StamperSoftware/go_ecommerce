{{template "base" .}}
{{define "title"}} Virtual Terminal {{end}}
{{define "content"}}
    <h2 class="mt-3 text-center">Virtual Terminal</h2>
    <hr>
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>    
    <form action="/payment-succeeded" method="post" name="charge-form" id="charge-form"
          class="d-block needs-validation charge-form" autocomplete="off" novalidate>
        
        <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <input type="text" class="form-control" id="amount" name="amount" required autocomplete="amount-new">
        </div>
        <div class="mb-3">
            <label for="cardholder-name" class="form-label">CardHolder Name</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" required autocomplete="cardholder-name-new">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" required autocomplete="email-new">
        </div>
        
        <div class="mb-3">
            <label for="card-element" class="form-label">Card Card</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr>

        <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">Charge Card</a>
        
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        
        <input type="hidden" name="payment-intent" id="payment-intent">
        <input type="hidden" name="payment-method" id="payment-method">
        <input type="hidden" name="payment-name" id="payment-name">
        <input type="hidden" name="payment-currency" id="payment-currency">
        
    </form>
    
        
{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let card;
        let stripe;
        const cardMessages = document.getElementById("card-messages");
        const payButton = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");
        
        stripe = Stripe("{{index .StringMap "publishable_key"}}")
        const hidePayButton = () => {
            payButton.classList.add("d-none");
            processing.classList.remove("d-none");
        }
        const showPayButton = () => {
            payButton.classList.remove("d-none");
            processing.classList.add("d-none");
        }
        
        const showCardError = (msg) => {
            document.getElementById("card-messages").classList.remove("d-none");
            document.getElementById("card-messages").classList.remove("alert-success");
            document.getElementById("card-messages").classList.add("alert-danger");
            document.getElementById("card-messages").innerText = msg;
        }
        
        const showCardSuccess = () => {
            document.getElementById("card-messages").classList.remove("d-none");
            document.getElementById("card-messages").classList.add("alert-success");
            document.getElementById("card-messages").classList.remove("alert-danger");
            document.getElementById("card-messages").innerText = "Transaction Successful";
        }
        
        const val = () => {
            let form = document.getElementById("charge-form")
            
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return;
            }
            
            let amountToCharge = String(parseFloat(document.getElementById("amount").value * 100));
            let payload = {
                amount : amountToCharge,
                currency : "usd",
            }
            
            const requestOptions = {
                method :"post",
                headers : {
                    Accept : 'application/json',
                    "Content-Type" : 'application/json',
                },
                body : JSON.stringify(payload)
            }
            
            fetch('{{.API}}/payment-intent', requestOptions)
                .then(response => response.text())
                .then(response => {
                    let data;
                    try {
                        data = JSON.parse(response)
                        stripe.confirmCardPayment(data.client_secret, {
                            payment_method : {
                                card,
                                billing_details:{
                                    name: document.getElementById("cardholder-name").value,
                                }
                            }
                        })
                        .then(result => {
                            if (result.error) {
                                showCardError(result.error.message)
                                showPayButton();
                            } else if (result.paymentIntent) {
                                if (result.paymentIntent.status === "succeeded") {
                                    document.getElementById("payment-method").value = result.paymentIntent.payment_method_types[0];
                                    document.getElementById("payment-intent").value = result.paymentIntent.id;
                                    document.getElementById("amount").value = result.paymentIntent.amount;
                                    document.getElementById("payment-currency").value = result.paymentIntent.currency;
                                    processing.classList.add("d-none");
                                    
                                    showCardSuccess();
                                    document.getElementById("charge-form").submit();
                                }
                            }
                        })
                    } catch (err) {
                        console.log(err);
                        showCardError("Invalid response from payment gateway");
                        showPayButton();
                    }
                })
            
            form.classList.add("was-validated");
            hidePayButton();
        }

        (() => {
            const elements = stripe.elements();
            const style = {
                base : {
                    fontSize : "16px",
                    
                }
            }
            card = elements.create("card", {
                style,
            })
            
            card.mount("#card-element")
            
            card.addEventListener('change', (event) => {
                let displayError = document.getElementById("card-errors");
                
                if (event.error){
                    displayError.classList.remove('d-none');
                    displayError.textContent = event.error.message;
                } else {
                    displayError.classList.add('d-none');
                    displayError.textContent = '';
                }
            })
            
        })();
        
    </script>
{{end}}