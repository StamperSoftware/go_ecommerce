{{template "base" .}}

{{define "title"}}
Bronze Plan
{{end}}
    

{{define "content"}}
    {{$widget := index .Data "widget"}}
        
    <h2 class="mt-3 text-center">Bronze Plan: {{formatCurrency $widget.Price}}</h2>
    <hr>
        
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>   
        
    <form action="/payment-succeeded-temp" method="post" name="charge-form" id="charge-form"
          class="d-block needs-validation charge-form" autocomplete="off" novalidate>

        <input type="hidden" name="product_id" id="product_id" value="{{$widget.ID}}">
        <input type="hidden" id="amount" name="amount" value="{{$widget.Price}}">
        
        <p>{{$widget.Description}}</p>
        <hr>
        
        <div class="mb-3">
            <label for="first_name" class="form-label">First Name</label>
            <input type="text" class="form-control" id="first_name" name="first_name" required autocomplete="first_name-new">
            <div class="valid-feedback" id="first_name-help"></div>
        </div>
        <div class="mb-3">
            <label for="last-name" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="last-name" name="last-name" required autocomplete="last-name-new">
        </div>
        
        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Name on Card</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" required autocomplete="cardholder-name-new">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" required autocomplete="email-new">
        </div>
        
        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr>

        <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">Pay {{formatCurrency $widget.Price}} per month</a>
        
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        
        <input type="hidden" name="payment-intent" id="payment-intent">
        <input type="hidden" name="payment-method" id="payment-method">
        <input type="hidden" name="payment-name" id="payment-name">
        <input type="hidden" name="payment-currency" id="payment-currency">
        
    </form>
{{end}}

{{define "js"}}
    {{$widget := index .Data "widget"}}
    
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let card;
        let stripe;
        const cardMessages = document.getElementById("card-messages");
        const payButton = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");
        
        stripe = Stripe("{{.StripePublishable}}")
        const hidePayButton = () => {
            payButton.classList.add("d-none");
            processing.classList.remove("d-none");
        }
        const showPayButton = () => {
            payButton.classList.remove("d-none");
            processing.classList.add("d-none");
        }
        
        const showCardError = (msg) => {
            document.getElementById("card-messages").classList.remove("d-none");
            document.getElementById("card-messages").classList.remove("alert-success");
            document.getElementById("card-messages").classList.add("alert-danger");
            document.getElementById("card-messages").innerText = msg;
        }
        
        const showCardSuccess = () => {
            document.getElementById("card-messages").classList.remove("d-none");
            document.getElementById("card-messages").classList.add("alert-success");
            document.getElementById("card-messages").classList.remove("alert-danger");
            document.getElementById("card-messages").innerText = "Transaction Successful";
        }
        
        const val = () => {
            let form = document.getElementById("charge-form")
            
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return;
            }
            
            let amountToCharge = document.getElementById("amount").value;
            
            form.classList.add("was-validated");
            hidePayButton();
            
            stripe.createPaymentMethod({
                type:"card",
                card,
                billing_details: {
                    email : document.getElementById("email").value,
                },
            }).then(stripePaymentMethodHandler)
            
        }

        const stripePaymentMethodHandler = (result) => {
            if (result.error) {
                showCardError(result.error.message)
            } else {
                let payload = {
                    plan : '{{$widget.PlanID}}',
                    payment_method: result.paymentMethod.id,
                    email : document.getElementById('email').value,
                    last_four : result.paymentMethod.card.last4,
                    product_id : document.getElementById('product_id').value,
                    card_brand : result.paymentMethod.card.brand,
                    exp_month : result.paymentMethod.card.exp_month,
                    exp_year : result.paymentMethod.card.exp_year,
                    first_name : document.getElementById("first_name").value,
                    last_name : document.getElementById("last-name").value,
                    amount : document.getElementById("amount").value,
                }
                
                const requestOptions = {
                    method:"post",
                    header: {
                        "Accept":"application/json",
                        "Content-Type":"application/json"
                    },
                    body: JSON.stringify(payload)
                }
                
                fetch("{{.API}}/create-customer-and-subscribe", requestOptions)
                    .then(response => response.json())
                    .then((data) => {
                        
                        if (data.error) {
                            document.getElementById("charge-form").classList.remove("was-validated")
                            Object.entries(data.errors).forEach(error => {
                                const [key, value]=error;
                                const field = document.getElementById(key);
                                const fieldHelper = document.getElementById(`${key}-help`);
                                
                                field.classList.add('is-invalid');
                                fieldHelper.classList.remove('valid-feedback');
                                fieldHelper.classList.add('invalid-feedback');
                                fieldHelper.innerText = value;
                            })
                            showPayButton();
                            return;
                        }
                        
                        processing.classList.add('d-none');
                        
                        showCardSuccess();
                        sessionStorage.first_name = document.getElementById("first_name").value;
                        sessionStorage.last_name = document.getElementById("last-name").value;
                        sessionStorage.last_four = result.paymentMethod.card.last4;
                        sessionStorage.amount = "{{formatCurrency $widget.Price}}";
                        
                        location.href = "/receipt/bronze";
                    })
                
            }
        }
        
        
        (() => {
            const elements = stripe.elements();
            const style = {
                base : {
                    fontSize : "16px",
                    
                }
            }
            card = elements.create("card", {
                style,
            })
            
            card.mount("#card-element")
            
            card.addEventListener('change', (event) => {
                let displayError = document.getElementById("card-errors");
                
                if (event.error){
                    displayError.classList.remove('d-none');
                    displayError.textContent = event.error.message;
                } else {
                    displayError.classList.add('d-none');
                    displayError.textContent = '';
                }
            })
            
        })();
        
    </script>
{{end}}